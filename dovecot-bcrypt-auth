#!/usr/bin/env perl
# Author: Daniel "brushdemon" Kicsak <dkicsak@gmail.com>
#         Patrick "tyil" Spek        <p.spek@tyil.nl>
# Version: 0.1
# License: GPLv3

package DovecotBcryptAuth;

use strict;
use warnings;
use IO::Handle;
use Path::Class;
use Unix::Syslog;

# Find an load dovecot-bcrypt-auth modules
use FindBin;
use lib $FindBin::Bin;
use lib $FindBin::Bin . '/lib';
use DovecotBcryptAuth::AccessDatabase;
use DovecotBcryptAuth::BcryptDecipher;
use DovecotBcryptAuth::BasedYAMLConfig;

# Change this to suit your needs
our $configuration = '/home/brushdemon/dovecot-bcrypt-auth/etc/dovecot_bcrypt_config.yaml';

# Based on http://cr.yp.to/checkpwd/interface.html recommendations.
# These are return codes that the checkpassword API knows how to handle.
our %RESPONSE = (
    ok           => 0,
    unacceptable => 1,
    misused      => 2,
    tempFailue   => 111
);

sub auth
{
    ## Expects: The username and password given to us through fd3.
    # Uses all of the subroutines to determine if the username + password combination is authentic.
    my (
        $clearUsername,
        $clearPassword
    ) = @_;

    $clearUsername = &scrubRawInput($clearUsername);
    $clearPassword = &scrubRawInput($clearPassword);

    # Load out configuration from the YAML.
    my $config        = new BasedYAMLConfig($configuration);
    my $yaml          = $config->getConfig();

    # Connect and query the DB based on the users credentials.
    my $database      = new AccessDatabase($yaml, $clearUsername, $clearPassword);
    my $dbc           = $database->dbConnect();
    my $hash          = $database->dbQuery($dbc);

    # Create a hash out of the users input password and compare to the hash extracted from the database.
    my $bcrypt        = new BcryptDecipher($hash, $clearPassword);
    my @processedHash = $bcrypt->bcryptExtract();
    my $newHash       = $bcrypt->bcryptEncrypt(@processedHash);

    # Exit with code 1 if the password doesn't match.
    if ( $bcrypt->bcryptCompare($newHash, $hash) == 0 ) {
        exit($RESPONSE{unacceptable});
    }
}

sub scrubRawInput
{
    ## Expects: The username and password
    # Removes any 'dangerous' characters from the username and password which may cause SQL injection.
    my $variable = shift;

    $variable =~ s/[."\n\r'\$\\`]//g;

    return $variable;
}

###########
####~~~ MAIN EXECUTION
###########
# We need to open a filehandler (descriptor 3). Username and password are provided in fd3. Each field
# is seperated by a break '\0'.
my $fhIn  = new IO::Handle();
my $fhErr = new IO::Handle();
my $fhOut = new IO::Handle();

$fhIn->fdopen(3, "r");
$fhOut->fdopen(4, "w");
$fhErr->fdopen(2, "w");

if ( ($fhIn->opened) && ($fhErr->opened) && ($fhOut->opened)) {
    # Read in from file descriptor 3 and make the data useable.
    $fhIn->read(my $rawInput, 512);
    my @authData = split(/\0/, $rawInput);

    # We will see only 2 params. Check the number of items in the @authData array.
    if ( scalar(@authData) != 2 ) {
        exit($RESPONSE{misused});
    }

    # Now we can see if the username + password combo is authentic. We'll check those against
    # the subroutines defined above.
    my $authResponse = &auth(@authData);

    # The user looks legitimate. We'll write our return values to fd4.
    if ($authResponse == $RESPONSE{ok}) {
        $fhOut->autoflush(1);

        # Generate all of the fields from our config file + 'username' field.
        my $config = new BasedYAMLConfig($configuration);
        my $yaml   = $config->getConfig();
        my @envArr = $config->setEnv($yaml, $authData[0]);

        # Join the array into a single string seperated by '\t'.
        my $envVar = '';

        foreach my $i (@envArr) {
            $envVar .= "$i\t";
        }

        # Finally we push the parameters out to fd4.
        $fhOut->print($envVar);
    } else {
        exit($RESPONSE{acceptable});
    }
} else {
    exit($RESPONSE{misused});
}

# Cleaning up
$fhIn->close if $fhIn->opened;
$fhOut->close if $fhOut->opened;
$fhErr->close if $fhErr->opened;

